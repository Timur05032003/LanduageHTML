package LanguageHTML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AnchorElement;
  private ConceptPresentation props_Body;
  private ConceptPresentation props_BodyElement;
  private ConceptPresentation props_DivElement;
  private ConceptPresentation props_Document;
  private ConceptPresentation props_Head;
  private ConceptPresentation props_HeadChild;
  private ConceptPresentation props_HtmlDocument;
  private ConceptPresentation props_HtmlElement;
  private ConceptPresentation props_ParagraphElement;
  private ConceptPresentation props_SpanElement;
  private ConceptPresentation props_TextElement;
  private ConceptPresentation props_TitleElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AnchorElement:
        if (props_AnchorElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<AnchorElement_Alias>");
          props_AnchorElement = cpb.create();
        }
        return props_AnchorElement;
      case LanguageConceptSwitch.Body:
        if (props_Body == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Body");
          props_Body = cpb.create();
        }
        return props_Body;
      case LanguageConceptSwitch.BodyElement:
        if (props_BodyElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BodyElement = cpb.create();
        }
        return props_BodyElement;
      case LanguageConceptSwitch.DivElement:
        if (props_DivElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<DivElement_Alias>");
          props_DivElement = cpb.create();
        }
        return props_DivElement;
      case LanguageConceptSwitch.Document:
        if (props_Document == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Document = cpb.create();
        }
        return props_Document;
      case LanguageConceptSwitch.Head:
        if (props_Head == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Head");
          props_Head = cpb.create();
        }
        return props_Head;
      case LanguageConceptSwitch.HeadChild:
        if (props_HeadChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HeadChild = cpb.create();
        }
        return props_HeadChild;
      case LanguageConceptSwitch.HtmlDocument:
        if (props_HtmlDocument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HtmlDocument");
          props_HtmlDocument = cpb.create();
        }
        return props_HtmlDocument;
      case LanguageConceptSwitch.HtmlElement:
        if (props_HtmlElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HtmlElement = cpb.create();
        }
        return props_HtmlElement;
      case LanguageConceptSwitch.ParagraphElement:
        if (props_ParagraphElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<ParagraphElement_Alias>");
          props_ParagraphElement = cpb.create();
        }
        return props_ParagraphElement;
      case LanguageConceptSwitch.SpanElement:
        if (props_SpanElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<SpanElement_Alias>");
          props_SpanElement = cpb.create();
        }
        return props_SpanElement;
      case LanguageConceptSwitch.TextElement:
        if (props_TextElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<TextElement_Alias>");
          props_TextElement = cpb.create();
        }
        return props_TextElement;
      case LanguageConceptSwitch.TitleElement:
        if (props_TitleElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<TitleElement_Alias>");
          props_TitleElement = cpb.create();
        }
        return props_TitleElement;
    }
    return null;
  }
}
