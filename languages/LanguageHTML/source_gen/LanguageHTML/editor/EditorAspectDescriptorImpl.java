package LanguageHTML.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AnchorElement_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Body_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new DivElement_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Document_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Head_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new HtmlDocument_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ParagraphElement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SpanElement_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new TextElement_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new TitleElement_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a872acaL), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x7a7699b586cbaa23L), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a871eeeL), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a86cc2fL), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x7a7699b586cba882L), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a867ce3L), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a872889L), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a87248dL), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a86a58bL), MetaIdFactory.conceptId(0xcfdb8e6e45b145d3L, 0xa650bdfedc3caeb8L, 0x2263eb887a870e67L)).seal();
}
